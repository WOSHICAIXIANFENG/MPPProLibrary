package com.mpp.project.library.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_OUT_ENTITY".
*/
public class CheckOutEntityDao extends AbstractDao<CheckOutEntity, Long> {

    public static final String TABLENAME = "CHECK_OUT_ENTITY";

    /**
     * Properties of entity CheckOutEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MemberId = new Property(1, String.class, "memberId", false, "MEMBER_ID");
        public final static Property BookID = new Property(2, String.class, "bookID", false, "BOOK_ID");
        public final static Property BookTitle = new Property(3, String.class, "bookTitle", false, "BOOK_TITLE");
        public final static Property CopyNumber = new Property(4, String.class, "copyNumber", false, "COPY_NUMBER");
        public final static Property CheckoutDate = new Property(5, String.class, "checkoutDate", false, "CHECKOUT_DATE");
        public final static Property DueDate = new Property(6, String.class, "dueDate", false, "DUE_DATE");
    };


    public CheckOutEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CheckOutEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_OUT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MEMBER_ID\" TEXT," + // 1: memberId
                "\"BOOK_ID\" TEXT," + // 2: bookID
                "\"BOOK_TITLE\" TEXT," + // 3: bookTitle
                "\"COPY_NUMBER\" TEXT," + // 4: copyNumber
                "\"CHECKOUT_DATE\" TEXT," + // 5: checkoutDate
                "\"DUE_DATE\" TEXT);"); // 6: dueDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_OUT_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckOutEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(2, memberId);
        }
 
        String bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindString(3, bookID);
        }
 
        String bookTitle = entity.getBookTitle();
        if (bookTitle != null) {
            stmt.bindString(4, bookTitle);
        }
 
        String copyNumber = entity.getCopyNumber();
        if (copyNumber != null) {
            stmt.bindString(5, copyNumber);
        }
 
        String checkoutDate = entity.getCheckoutDate();
        if (checkoutDate != null) {
            stmt.bindString(6, checkoutDate);
        }
 
        String dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindString(7, dueDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckOutEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String memberId = entity.getMemberId();
        if (memberId != null) {
            stmt.bindString(2, memberId);
        }
 
        String bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindString(3, bookID);
        }
 
        String bookTitle = entity.getBookTitle();
        if (bookTitle != null) {
            stmt.bindString(4, bookTitle);
        }
 
        String copyNumber = entity.getCopyNumber();
        if (copyNumber != null) {
            stmt.bindString(5, copyNumber);
        }
 
        String checkoutDate = entity.getCheckoutDate();
        if (checkoutDate != null) {
            stmt.bindString(6, checkoutDate);
        }
 
        String dueDate = entity.getDueDate();
        if (dueDate != null) {
            stmt.bindString(7, dueDate);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckOutEntity readEntity(Cursor cursor, int offset) {
        CheckOutEntity entity = new CheckOutEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // memberId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // bookID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bookTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // copyNumber
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // checkoutDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // dueDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckOutEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMemberId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBookID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBookTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCopyNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCheckoutDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDueDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckOutEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckOutEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
