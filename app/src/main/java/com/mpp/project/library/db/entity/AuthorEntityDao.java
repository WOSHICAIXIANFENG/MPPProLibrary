package com.mpp.project.library.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AUTHOR_ENTITY".
*/
public class AuthorEntityDao extends AbstractDao<AuthorEntity, Long> {

    public static final String TABLENAME = "AUTHOR_ENTITY";

    /**
     * Properties of entity AuthorEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FirstName = new Property(1, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property Credentials = new Property(4, String.class, "credentials", false, "CREDENTIALS");
        public final static Property ShortBio = new Property(5, String.class, "shortBio", false, "SHORT_BIO");
        public final static Property Street = new Property(6, String.class, "street", false, "STREET");
        public final static Property Zip = new Property(7, String.class, "zip", false, "ZIP");
        public final static Property City = new Property(8, String.class, "city", false, "CITY");
        public final static Property State = new Property(9, String.class, "state", false, "STATE");
    };


    public AuthorEntityDao(DaoConfig config) {
        super(config);
    }
    
    public AuthorEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUTHOR_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FIRST_NAME\" TEXT," + // 1: firstName
                "\"LAST_NAME\" TEXT," + // 2: lastName
                "\"PHONE\" TEXT," + // 3: phone
                "\"CREDENTIALS\" TEXT," + // 4: credentials
                "\"SHORT_BIO\" TEXT," + // 5: shortBio
                "\"STREET\" TEXT," + // 6: street
                "\"ZIP\" TEXT," + // 7: zip
                "\"CITY\" TEXT," + // 8: city
                "\"STATE\" TEXT);"); // 9: state
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUTHOR_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AuthorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String credentials = entity.getCredentials();
        if (credentials != null) {
            stmt.bindString(5, credentials);
        }
 
        String shortBio = entity.getShortBio();
        if (shortBio != null) {
            stmt.bindString(6, shortBio);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(7, street);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(8, zip);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AuthorEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(2, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(3, lastName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(4, phone);
        }
 
        String credentials = entity.getCredentials();
        if (credentials != null) {
            stmt.bindString(5, credentials);
        }
 
        String shortBio = entity.getShortBio();
        if (shortBio != null) {
            stmt.bindString(6, shortBio);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(7, street);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(8, zip);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(9, city);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(10, state);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AuthorEntity readEntity(Cursor cursor, int offset) {
        AuthorEntity entity = new AuthorEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firstName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // lastName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // credentials
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shortBio
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // street
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // zip
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // city
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // state
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AuthorEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirstName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLastName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCredentials(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShortBio(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStreet(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setZip(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCity(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AuthorEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AuthorEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
