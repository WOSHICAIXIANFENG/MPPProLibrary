package com.mpp.project.library.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_ENTITY".
*/
public class BookEntityDao extends AbstractDao<BookEntity, Long> {

    public static final String TABLENAME = "BOOK_ENTITY";

    /**
     * Properties of entity BookEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BookID = new Property(1, String.class, "bookID", false, "BOOK_ID");
        public final static Property Isbn = new Property(2, String.class, "isbn", false, "ISBN");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property IsAvailable = new Property(4, boolean.class, "isAvailable", false, "IS_AVAILABLE");
        public final static Property RentDays = new Property(5, int.class, "rentDays", false, "RENT_DAYS");
        public final static Property CopyNum = new Property(6, int.class, "copyNum", false, "COPY_NUM");
        public final static Property IsCopy = new Property(7, boolean.class, "isCopy", false, "IS_COPY");
        public final static Property CopyNumber = new Property(8, boolean.class, "copyNumber", false, "COPY_NUMBER");
    };


    public BookEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BookEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BOOK_ID\" TEXT," + // 1: bookID
                "\"ISBN\" TEXT," + // 2: isbn
                "\"TITLE\" TEXT," + // 3: title
                "\"IS_AVAILABLE\" INTEGER NOT NULL ," + // 4: isAvailable
                "\"RENT_DAYS\" INTEGER NOT NULL ," + // 5: rentDays
                "\"COPY_NUM\" INTEGER NOT NULL ," + // 6: copyNum
                "\"IS_COPY\" INTEGER NOT NULL ," + // 7: isCopy
                "\"COPY_NUMBER\" INTEGER NOT NULL );"); // 8: copyNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindString(2, bookID);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(3, isbn);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getIsAvailable() ? 1L: 0L);
        stmt.bindLong(6, entity.getRentDays());
        stmt.bindLong(7, entity.getCopyNum());
        stmt.bindLong(8, entity.getIsCopy() ? 1L: 0L);
        stmt.bindLong(9, entity.getCopyNumber() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bookID = entity.getBookID();
        if (bookID != null) {
            stmt.bindString(2, bookID);
        }
 
        String isbn = entity.getIsbn();
        if (isbn != null) {
            stmt.bindString(3, isbn);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
        stmt.bindLong(5, entity.getIsAvailable() ? 1L: 0L);
        stmt.bindLong(6, entity.getRentDays());
        stmt.bindLong(7, entity.getCopyNum());
        stmt.bindLong(8, entity.getIsCopy() ? 1L: 0L);
        stmt.bindLong(9, entity.getCopyNumber() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public BookEntity readEntity(Cursor cursor, int offset) {
        BookEntity entity = new BookEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // isbn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.getShort(offset + 4) != 0, // isAvailable
            cursor.getInt(offset + 5), // rentDays
            cursor.getInt(offset + 6), // copyNum
            cursor.getShort(offset + 7) != 0, // isCopy
            cursor.getShort(offset + 8) != 0 // copyNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBookID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsbn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsAvailable(cursor.getShort(offset + 4) != 0);
        entity.setRentDays(cursor.getInt(offset + 5));
        entity.setCopyNum(cursor.getInt(offset + 6));
        entity.setIsCopy(cursor.getShort(offset + 7) != 0);
        entity.setCopyNumber(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
